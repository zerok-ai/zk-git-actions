name: build-push
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
      MAKE_TARGET:
        type: string
        default: 'ci-cd-build'
      VERSION:
        type: string
      DOCKER_IDENTIFIER:
        type: string
      DOCKER_REG:
        type: string
      DOCKER_FILE_NAME:
        type: string
        default: 'Dockerfile'
      APP_NAME_VAR:
        type: string
        default: 'APP_NAME'
    secrets:
      GKE_SA_KEY:
        required: true
      AWS_ACCESS_ID:
        required: true
      AWS_SECRET_KEY:
        required: true
env:
  TOKEN: ${{ secrets.GITPAT }}
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO }}
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
  DOCKER_REG: ${{ inputs.DOCKER_REG }}
  VERSION: ${{ inputs.VERSION }}
  DOCKER_IDENTIFIER: ${{ inputs.DOCKER_IDENTIFIER }}

jobs:

  build:
    runs-on: zk-self-hosted
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure git for private modules
        run: git config --global url."https://$TOKEN:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Build
        run: |
          make ${{ inputs.MAKE_TARGET }}

  docker-push:
    needs: build
    runs-on: zk-self-hosted
    env:
      REPO_NAME: ${{ format('{0}/{1}/{2}/{3}', inputs.DOCKER_REG, vars.DOCKER_REPO, inputs.DOCKER_IDENTIFIER, vars[format('{0}', inputs.APP_NAME_VAR)] ) }}
      CREATE_REPO_NAME: ${{ format('{0}/{1}/{2}/{3}', vars.DOCKER_REPO, vars.PROJECT_ID, inputs.DOCKER_IDENTIFIER, vars[format('{0}', inputs.APP_NAME_VAR)] ) }}
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Authenticate to Google Cloud
        if: ${{ vars.DOCKER_REG_CURRENT_CLOUD == 'gcp' }}
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: Configure AWS credentials
        if: ${{ vars.DOCKER_REG_CURRENT_CLOUD == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Public ECR
        if: ${{ vars.DOCKER_REG_CURRENT_CLOUD == 'aws' }}
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_ID }}
          password: ${{ secrets.AWS_SECRET_KEY }}
          logout: false
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Remove existing docker buildx
        run: |
          docker buildx rm multi-platform-builder || true

      - name: Init docker buildx
        run: |
          docker buildx create --use --platform=linux/arm64,linux/amd64 --name multi-platform-builder

      - name: Create AWS repo
        if: ${{ vars.DOCKER_REG_CURRENT_CLOUD == 'aws' }}
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |-
          aws ecr-public describe-repositories --repository-names ${CREATE_REPO_NAME} || aws ecr-public create-repository --repository-name ${CREATE_REPO_NAME}

      - name: Docker build and Push
        run: |-
          docker buildx build --platform=linux/arm64,linux/amd64 --push \
          --tag "$DOCKER_REG/$PROJECT_ID/$DOCKER_REPO/$DOCKER_IDENTIFIER/$APP_NAME:$GITHUB_SHA" \
          --tag "$DOCKER_REG/$PROJECT_ID/$DOCKER_REPO/$DOCKER_IDENTIFIER/$APP_NAME:$VERSION" \
          -f ${{ inputs.DOCKER_FILE_NAME }} .

      - name: Remove docker buildx
        run: |
          docker buildx rm multi-platform-builder
