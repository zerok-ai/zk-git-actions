name: dev-init
on:
  workflow_call:
    inputs:
      GIT_TAG:
        type: string
      CLUSTER_NAME:
        type: string
      DOCKER_TAG:
        type: string
    outputs:
      ENVIRONMENT:
        description: "Extracted environment"
        value: ${{ jobs.init.outputs.ENVIRONMENT }}
      CLOUD_DOMAIN:
        description: "Extracted cloud domain"
        value: ${{ jobs.init.outputs.CLOUD_DOMAIN }}
      VERSION:
        description: "Extracted version"
        value: ${{ jobs.init.outputs.VERSION }}
      CLUSTERNAME:
        description: "Extracted cluster name"
        value: ${{ jobs.init.outputs.CLUSTERNAME }}
      HELM_BUCKET_NAME:
        description: "Helm bucket name"
        value: ${{ jobs.init.outputs.HELM_BUCKET_NAME }}
      HELM_BUCKET_URL:
        description: "Helm bucket url"
        value: ${{ jobs.init.outputs.HELM_BUCKET_URL }}
      DOCKER_REG:
        description: "Docker registry"
        value: ${{ jobs.init.outputs.DOCKER_REG }}
env:
  GIT_TAG: ${{ inputs.GIT_TAG }}
  CLUSTER_NAME: ${{ inputs.CLUSTER_NAME }}
  DOCKER_TAG: ${{ inputs.DOCKER_TAG }}
  DOCKER_REG_CURRENT_CLOUD : ${{ vars.DOCKER_REG_CURRENT_CLOUD }}
  GCLOUD_PROJECT_ID: ${{ vars.DEV_GCLOUD_PROJECT_ID }}
  DOCKER_REG_GCP: ${{ vars.DOCKER_REG_GCP }}
  DOCKER_REG_AWS: ${{ vars.DOCKER_REG_AWS }}
jobs:
  init:
    runs-on: zk-self-hosted
    outputs:
      ENVIRONMENT: ${{ steps.extractEnvironment.outputs.EXTRACTED_ENVIRONMENT }}
      CLOUD_DOMAIN: ${{ steps.extractCloudDomain.outputs.EXTRACTED_DOMAIN }}
      CLUSTERNAME: ${{ steps.extractClusterAndVersion.outputs.TAG_CLUSTERNAME }}
      VERSION: ${{ steps.extractClusterAndVersion.outputs.TAG_VERSION }}
      HELM_BUCKET_NAME: ${{ vars.PRIVATE_HELM_S3_BUCKET }}
      HELM_BUCKET_URL: ${{ vars.PRIVATE_HELM_S3_BUCKET_URL }}
      DOCKER_REG: ${{ steps.setDockerReg.outputs.DOCKER_REG }}
    steps:
      - name: Extract cluster and version
        id: extractClusterAndVersion
        run: |
          if [ "$DOCKER_TAG" == "" ]; then
            GIT_TAG=${GIT_TAG#refs/*/}
            clusterName=$(echo "$GIT_TAG" | cut -d'/' -f2)
            version=$(echo "$GIT_TAG" | cut -d'/' -f3)
            semver_pattern="^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$"
            if [[ $version =~ $semver_pattern ]]; then
              echo "TAG_CLUSTERNAME=$clusterName" >> $GITHUB_OUTPUT
              echo "TAG_VERSION=$version" >> $GITHUB_OUTPUT
            else
              echo "invalid version tag - ${version}. Tag should match semver pattern. Go to https://semver.org/ for more info"
              exit 1  # Exit with failure
            fi
          else
            echo "TAG_CLUSTERNAME=$CLUSTER_NAME" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=$DOCKER_TAG" >> $GITHUB_OUTPUT
            clusterName=$CLUSTER_NAME
          fi
          TAG_CLUSTERNAME_CAPITAL=$(echo "$clusterName" | tr '[:lower:]' '[:upper:]')
          echo "TAG_CLUSTERNAME_CAPITAL=$TAG_CLUSTERNAME_CAPITAL" >> $GITHUB_OUTPUT

      - name: Extract environment
        id: extractEnvironment
        env:
          ORG_VARIABLE_NAME: ${{ format('{0}_ENV', steps.extractClusterAndVersion.outputs.TAG_CLUSTERNAME_CAPITAL) }}
          ORG_VARIABLE: ${{ vars[format('{0}_ENV', steps.extractClusterAndVersion.outputs.TAG_CLUSTERNAME_CAPITAL)] }}
        run: |
          echo "EXTRACTED_ENVIRONMENT=$ORG_VARIABLE" >> $GITHUB_OUTPUT
          echo "$ORG_VARIABLE_NAME"
          echo "$ORG_VARIABLE"

      - name: Extract cloud domain
        id: extractCloudDomain
        env:
          CLOUD_DOMAIN_VARIABLE_NAME: ${{ format('{0}_DOMAIN', steps.extractClusterAndVersion.outputs.TAG_CLUSTERNAME_CAPITAL) }}
          CLOUD_DOMAIN_VARIABLE: ${{ vars[format('{0}_DOMAIN', steps.extractClusterAndVersion.outputs.TAG_CLUSTERNAME_CAPITAL)] }}
        run: |
          echo "EXTRACTED_DOMAIN=$CLOUD_DOMAIN_VARIABLE" >> $GITHUB_OUTPUT
          echo "$CLOUD_DOMAIN_VARIABLE_NAME"
          echo "$CLOUD_DOMAIN_VARIABLE"

      - name: Set DOCKER_REG Variable
        id: setDockerReg
        run: |
          echo "DOCKER_REG=$DOCKER_REG_CURRENT_CLOUD"
          if [ "$DOCKER_REG_CURRENT_CLOUD" == "gcp" ]; then
            echo "DOCKER_REG=$DOCKER_REG_GCP/$GCLOUD_PROJECT_ID" >> $GITHUB_OUTPUT
            echo "docker registry current cloud is GCP"
            echo "$DOCKER_REG_GCP"
          elif [ "$DOCKER_REG_CURRENT_CLOUD" == "aws" ]; then
            echo "DOCKER_REG=$DOCKER_REG_AWS" >> $GITHUB_OUTPUT
            echo "docker registry current cloud is AWS"
            echo "$DOCKER_REG_AWS"
          else
            echo "DOCKER_REG_CURRENT_CLOUD is not set"
            exit 1
          fi
          echo "$DOCKER_REG"
